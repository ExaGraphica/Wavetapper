const Colors = [
    ['#54130B','#A9A9A9','#6B180E','#FFB2A7','#FF4A45'],
    ['#51280B','#A9A9A9','#6B3510','#FFCEA6','#FC903A'],
    ['#4E3F0A','#A9A9A9','#5E4B0E','#FFEBA7','#F3CE37'],
    ['#404809','#A9A9A9','#555E0D','#EEF8A5','#DEF030'],
    
    ['#25460A','#A9A9A9','#2F5B0D','#C9F5A6','#80E62E'],
    ['#08430B','#A9A9A9','#0A570D','#A4F2A6','#35E13E'],
    ['#074426','#A9A9A9','#0A5A31','#A2F4CA','#2CD88E'],
    ['#074641','#A9A9A9','#0A5C54','#A3F6EF','#3BE6CE'],
    
    ['#083C4E','#A9A9A9','#0A4E67','#A4E8FF','#34CDF8'],
    ['#0B2650','#A9A9A9','#0C3267','#A4CBFF','#3485FF'],
    ['#0C1151','#A9A9A9','#101668','#A8AEFF','#3B46FF'],
    ['#281250','#A9A9A9','#351968','#CDB1FF','#8951FB'],
    
    ['#431550','#A9A9A9','#591B67','#F3B5FF','#DE57F6'],
    ['#521641','#A9A9A9','#6C1C55','#FFB5EE','#FF57D6'],
    ['#521426','#A9A9A9','#6C1B32','#FFB3CB','#FF5484'],
    ['#323232','#A9A9A9','#434343','#CBCBCB','#A8A8A8'],
];

const SpinDelay = [0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6];

const Names = {
    0: 'Drums',
    1: 'Chord',
    2: 'FA Front',
    3: 'FA Back',
    4: 'WWDTM High',
    5: 'WWDTM Low',
    6: 'SF Roll',
    7: 'SF Tap',
    8: 'PM',
    9: 'Arp',
    10: 'Noise',
    11: 'DTMF',
    12: 'Bass',
    13: 'Spreader',
    14: 'Radiolab',
    15: '',
}

const Sounds = {
    0: [
        "Kick_Long",
        "Kick_Short",
        "Kick_Short_Quiet",
        "Noise_High_80",
        "Noise_Low_40",
        "Noise_Low_80",
        "Noise_Shot_20",
        "Noise_Shot_60",
        "Noise_Shot_80"
    ],
    1:  Array.make(32,i => 'Lock_A_' + String(i).padStart(3,'0'))
    .concat(Array.make(40,i => 'Lock_B_' + String(i).padStart(3,'0')))
    .concat(Array.make(64,i => 'Flow_A_' + String(i).padStart(3,'0')))
    .concat(Array.make(80,i => 'Flow_B_' + String(i).padStart(3,'0'))),
    2: [
        "ih",
        "so",
        "yi",
    ],
    3: [
        "gure"
    ],
    4: [
        "play_10",
        "play_20",
        "play_30",
        "play_80"
    ],
    5: [
        "gil",
        "ha"
    ],
    6: [
        "nu",
        "qi_Cut_20",
        "qi_Cut_40",
        "qi_Long",
        "qi_Short"
    ],
    7: [
        "di"
    ],
    8: [
        "ba",
        "but",
        "cu",
        "dis",
        "ki",
        "mi",
        "net",
        "sha",
        "su_Long",
        "su_Short"
    ],
    9: Array.make(205,i => String(i+1).padStart(3,'0')),
    10: [
        "01",
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "Break",
        "Hum",
        "In"
    ],
    11: [
        "Break",
        "Busy_Long",
        "Busy_Short",
        "Dial",
        "Hang-Up",
        "Off-Hook_Long",
        "Off-Hook_Short",
        "Ringback_Long",
        "Ringback_Short",
        
        "ABC",
        "DEF",
        "GHI",
        "JKL",
        "MNO",
        "PQRS",
        "TUV"
    ],
    12: [
        "1",
        "2",
        "3",
        "4",
        "5"
    ],
    13: Array.make(24,i => 'A_' + String(i).padStart(3,'0')).concat(Array.make(24,i => 'B_' + String(i).padStart(3,'0'))).concat(Array.make(8,i => 'C_' + String(i+16).padStart(3,'0'))),
    14: Array.make(168,i => String(i+1).padStart(3,'0')),
    15: [],
};

const TileConfigs = {
    0: [
        [1,0],
        [1,0],
        [1,0],
        [0,2],
        [0,3],
        [0,3],
        [0,4],
        [0,4],
        [0,4],
        
        [5,6],
    ],
    1: '01'.repeat(16).split('').map(n => [Number(n), 0])
    .concat('01'.repeat(20).split('').map(n => [0, Number(n)]))
    .concat('01010101020202020303030303030404'.repeat(2).split('').map(n => [Number(n), 0]))
    .concat('0101010101020202020203030303030303030404'.repeat(2).split('').map(n => [0, Number(n)]))
    .concat([[5,6]]),
    2: [
        [1, 0],
        [0, 3],
        [2, 0],
        
        [4, 5]
    ],
    3: [
        [1, 2],
        
        [3, 4]
    ],
    4: [
        [0, 0],
        [1, 2],
        [1, 2],
        [1, 2],
        
        [3, 4]
    ],
    5: [
        [0, 2],
        [1, 0],
        
        [3, 4]
    ],
    6: [
        [1, 0],
        [0, 2],
        [0, 2],
        [0, 2],
        [0, 2],
        
        [3, 4]
    ],
    7: [
        [1, 2],
        
        [3, 4]
    ],
    8: [
        [0,4],
        [0,6],
        [2,0],
        [3,0],
        [5,0],
        [7,0],
        [8,0],
        [0,1],
        [0,9],
        [0,9],
        
        [0,10]
    ],
    9: ('12121212'+('1234'.repeat(8))+'0').repeat(5).split('').map(n => [
        [0,0],
        [0,1],
        [3,0],
        [0,2],
        [4,0]
    ][n]).concat([[5,6]]),
    10: [
        [40,39],
        [38,37],
        [36,35],
        [34,33],
        [32,31],
        [30,29],
        [28,27],
        [26,25],
        [24,23],
        [22,21],
        [20,19],
        [18,17],
        [16,15],
        [14,13],
        [12,11],
        [10,9],
        [0,0],
        [0,0],
        [0,0],
        
        [1,2],
        [3,4],
        [5,6],
        [7,8],
        
        [41, 42]
    ],
    11: [
        [0,0],//elsewhere
        [10,0],
        [10,0],
        [1,0],
        [0,13],
        [12,0],
        [12,0],
        [9,0],
        [9,0],
        
        [0,2],
        [0,3],
        [0,4],
        [0,5],
        [0,6],
        [0,7],
        [0,8],
        
        [11,0],
        [14, 0]
    ],
    12: [
        [1,1],
        [2,2],
        [3,3],
        [3,3],
        [4,4],
        
        [5, 6]
    ],
    13: '1234'.repeat(6).split('').map(n => [Number(n),Number(n)])
    .concat(new Array(24).fill([0,0]))
    .concat('5678'.repeat(2).split('').map(n => [Number(n),Number(n)])).concat([[9,10]]),
    14: [
        [0,1],[0,1],[0,1],
        [0,1],[0,1],[0,1],
        [0,1],[0,1],[0,1],
        [0,1],[0,1],[0,1],
        
        [0,1],
        [2,0],
        [3,0],
        [3,0],
        [0,4],
        [2,0],
        [3,0],
        [0,4],
        
        [5,0],
        [2,0],
        [0,6],[0,6],
        [0,6],[0,6],
        [7,0],
        [5,0],
        [8,0],
        //
        
        [0,6],
        [0,9],
        [0,10],
        [0,6],
        [0,9],
        [0,10],
        [0,11],[0,11],
        [0,11],[0,11],
        
        [0,11],
        [2,0],
        [12,0],
        [3,0],
        [8,0],
        [8,0],
        [8,0],
        //
        
        [13,0],
        [13,0],
        [13,0],
        [0,11],[0,11],
        [0,11],[0,11],
        [0,14],
        [7,0],
        [7,0],
        
        [0,1],
        [15,0],
        [15,0],
        [3,0],[3,0],[3,0],[3,0],
        [16,0],
        [0,1],
        [16,0],
        [0,4],
        
        [0,4],
        [0,17],
        [0,17],
        [3,0],
        [18,0],
        [18,0],
        [3,0],
        [0,4],
        
        [0,14],
        [0,4],
        [0,19],
        [0,19],[0,19],
        [8,0],
        [8,0],
        [8,0],
        [8,0],
        
        [0,1],[0,1],
        [0,1],[0,1],
        [13,0],
        [13,0],
        [0,11],[0,11],
        [7,0],
        [0,10],
        [16,0],
        
        [0,19],
        [0,11],[0,11],
        [0,19],
        [5,0],
        [0,6],
        [0,6],
        [3,0],
        [2,0],
        
        [18,0],
        [0,6],
        [0,6],
        [15,0],
        [12,0],
        [0,4],
        [0,4],
        [0,4],
        
        [0,9],[0,9],
        [0,9],[0,9],
        [0,19],
        [0,10],
        [8,0],
        [8,0],
        [8,0],
        [8,0],
        
        [13,0],
        [13,0],
        [16,0],
        [13,0],
        [13,0],
        [16,0],
        [13,0],
        [13,0],
        
        [0,1],
        [0,10],
        [7,0],[7,0],
        [7,0],[7,0],
        [0,9],
        [0,9],
        [0,6],
        [0,9],
        
        [0,11],[0,11],
        [5,0],
        [0,17],
        [0,11],[0,11],
        [5,0],
        [0,14],
        [18,0],
        [0,14],
        
        [0,1],
        [15,0],[15,0],
        [0,4],
        [0,14],[0,14],
        [20,21],[20,21],
        [20,21],[20,21],
        [20,21],[20,21],[20,21],[20,21],
        [20,21],[20,21],[20,21],[20,21],
        
        ////
        [22, 23]
    ],
    15: Array.make(38, i => [i,i]).concat([[39,40]])
};

const TileDurations = {
    0: [
        6,6,6,6,6,6,
        3,3,3,
    ],
    1: [24,24,12,36].repeat(8)//....0000..000000
    .concat([24,24,12,24,12,24,12,24,12,24].repeat(4))//....0000..0000..0000..0000..0000
    .concat([24,24,12,36].repeat(16))
    .concat([24,24,12,24,12,24,12,24,12,24].repeat(8)),
    2: [6, 6, 9],
    3: [12],
    4: [0,6,6,6],
    5: [6,6],
    6: [6,3,3,6,6],
    7: [6],
    8: [6, 6, 6, 6, 6, 6, 6, 6, 12, 6],
    9: Array(205).fill(6),
    10: [
        6,6,6,6,
        6,6,6,6,
        6,6,6,6,
        6,6,6,6,
        
        0,0,0,
        
        48,48,48,48,
    ],
    11: [
        0,
        48,
        24,
        36,
        24,
        9,
        9,
        48,
        48,
        
        9,
        9,
        9,
        9,
        9,
        9,
        9,
        
        108,
    ],
    12: [
        192,
        192,
        192,
        96,
        96,
    ],
    13: [192,192,288,96].repeat(6)
    .concat(new Array(24).fill(0))
    .concat([192,192,288,96].repeat(2)),
    14: [
        2,2,2,
        2,2,2,
        2,2,2,
        2,2,2,
        
        6,6,6,6,6,6,6,6,
        
        6,6,3,3,3,3,6,6,6,
        
        6,6,6,6,6,6,3,3,3,3,
        
        6,6,6,6,6,6,6,
        
        6,6,6,3,3,3,3,6,6,6,
        
        6,6,6,2,2,2,2,6,6,6,6,
        
        6,6,6,6,6,6,6,6,
        
        6,6,6,3,3,6,6,6,6,
        
        3,3,3,3,6,6,3,3,6,6,
        
        6,3,3,6,6,6,6,6,6,
        
        6,6,6,6,6,6,6,6,
        
        3,3,3,3,6,6,6,6,6,6,
        
        6,6,6,6,6,6,6,6,
        
        6,6,3,3,3,3,6,6,6,6,
        
        3,3,6,6,3,3,6,6,6,6,
        
        6,3,3,6,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,
    ],
    15: Array(38).fill(24)
};

/*

Text:

1, 2, 3, 4, 5, 6, 7, 8
9, 3, 10, 11, 12, 13
1, 14, 9, 15, 11, 16, 17, 18, 19, 3, 20
20, 15, 1, 21, 22, 11, 16
23, 21, 24, 22, 11, 16
17, 25, 15, 20, 24, 17, 14, 3, 4, 26, 18, 3, 20
27, 28, 2
2, 23, 29, 30
31, 21, 32, 29, 30
11, 33, 34, 29, 30
6, 31, 2, 3, 20, 2, 11, 33, 29, 30
26, 35, 27, 36, 29
26, 35, 27, 36, 29
37, 33, 5, 37, 33
9, 28, 36, 38
37, 33, 5, 37, 33
9, 28, 36, 38
9, 28, 36, 38

[23, 21, 24, 22, 11, 16].map((n,i) => [24*(i&7),n-1,24]).map(n=>'['+n.join(',')+']').join(',');

Bar Times for each:
1
5
9
13
17
21
25
33
35
37
39-40
41 offset
49 offset
58
62
66
70
74

*/